// Generated by CoffeeScript 1.9.0

/*!
 * @license fluidfont
 * (c) sugarshin
 * License: MIT
 */

(function() {
  "use strict";
  (function(root, factory) {
    if (typeof module === 'object' && typeof module.exports === 'object') {
      module.exports = factory(require('jquery'), require('throttle-debounce'));
    } else {
      root.FluidFont || (root.FluidFont = factory(root.jQuery));
    }
  })(this, function($, td) {
    var FluidFont;
    if (td === void 0) {
      td = $;
    }
    return FluidFont = (function() {
      var _$window;

      _$window = $(window);

      FluidFont.prototype._getRandomString = (function() {
        var chars;
        chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghiklmnopqrstuvwxyz';
        return function(length) {
          var i, randomNumber, string, _i;
          if (length == null) {
            length = 32;
          }
          string = '';
          for (i = _i = 0; 0 <= length ? _i < length : _i > length; i = 0 <= length ? ++_i : --_i) {
            randomNumber = Math.floor(Math.random() * chars.length);
            string += chars.substring(randomNumber, randomNumber + 1);
          }
          return string;
        };
      })();

      FluidFont.prototype._defaults = {
        target: 'body',
        baseWidth: 640,
        baseSize: '1em',
        delay: 400,
        delayType: 'debounce'
      };

      FluidFont.prototype._configure = function(opts) {
        this.opts = opts || {};
        this.opts.target = this.opts.target || this._defaults.target;
        this.opts.baseWidth = this.opts.baseWidth || this._defaults.baseWidth;
        this.opts.baseSize = this.opts.baseSize || this._defaults.baseSize;
        this.opts.delay = this.opts.delay || this._defaults.delay;
        this.opts.delayType = this.opts.delayType || this._defaults.delayType;
        this.$el = $(this.opts.target);
        this._namespace = this._getRandomString(16) + +(new Date);
        return $('html').css('font-size', this.opts.baseSize);
      };

      function FluidFont(opts) {
        this._configure(opts);
        this.resize(_$window.outerWidth());
        this.events();
      }

      FluidFont.prototype.resize = function(width) {
        this.$el.css('font-size', (width / this.opts.baseWidth * 100) + "%");
        return this;
      };

      FluidFont.prototype.events = function() {
        _$window.on("resize.fluidfont:" + this._namespace, td[this.opts.delayType](this.opts.delay, (function(_this) {
          return function() {
            return _this.resize(_$window.outerWidth());
          };
        })(this)));
        return this;
      };

      FluidFont.prototype.addEvent = FluidFont.prototype.events;

      FluidFont.prototype.unbind = function() {
        _$window.off("resize.fluidfont:" + this._namespace);
        return this;
      };

      FluidFont.prototype.rmEvent = FluidFont.prototype.unbind;

      return FluidFont;

    })();
  });

}).call(this);
