// Generated by CoffeeScript 1.9.0

/*!
 * @license fluidfont
 * (c) sugarshin
 * License: MIT
 */

(function() {
  "use strict";
  (function(root, factory) {
    if (typeof module === 'object' && typeof module.exports === 'object') {
      module.exports = factory(require('jquery'), require('throttle-debounce'));
    } else {
      root.FluidFont || (root.FluidFont = factory(root.jQuery));
    }
  })(this, function($, td) {
    var FluidFont;
    if (td === void 0) {
      td = $;
    }
    return FluidFont = (function() {
      var _$window;

      _$window = $(window);

      FluidFont.prototype._defaults = {
        target: 'body',
        baseWidth: 640,
        baseSize: '1em',
        delay: 400,
        delayType: 'debounce'
      };

      FluidFont.prototype._configure = function(opts) {
        this.opts = $.extend({}, this._defaults, opts);
        this.$el = $(this.opts.target);
        return $('html').css('font-size', this.opts.baseSize);
      };

      function FluidFont(opts) {
        this._configure(opts);
        this.resize(_$window.outerWidth());
        this.events();
      }

      FluidFont.prototype.resize = function(width) {
        var size;
        size = (width / this.opts.baseWidth * 100) + "%";
        this.$el.css('font-size', size);
        return this;
      };

      FluidFont.prototype.events = function() {
        _$window.on('resize.fluidfont', td[this.opts.delayType](this.opts.delay, (function(_this) {
          return function() {
            return _this.resize(_$window.outerWidth());
          };
        })(this)));
        return this;
      };

      FluidFont.prototype.addEvent = FluidFont.prototype.events;

      FluidFont.prototype.unbind = function() {
        _$window.off('resize.fluidfont');
        return this;
      };

      FluidFont.prototype.rmEvent = FluidFont.prototype.unbind;

      return FluidFont;

    })();
  });

}).call(this);
